"""generate triggers

Revision ID: ae2a91a05175
Revises: 5ff4f107256e
Create Date: 2025-10-26 15:00:51.725046

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "ae2a91a05175"
down_revision: Union[str, None] = "5ff4f107256e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("article_likes", "text")
    op.alter_column("articles", "author_id", existing_type=sa.UUID(), nullable=True)
    public_trgfunc_decrement_article_comment_count = PGFunction(
        schema="public",
        signature="trgfunc_decrement_article_comment_count()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN \n        UPDATE article_analytics\n    SET comments = comments - 1,\n        date_updated_utc = now()\n    WHERE article_id = OLD.article_id;\n    RETURN OLD;\n\n\n    END;\n    $$ LANGUAGE plpgsql",
    )
    op.create_entity(public_trgfunc_decrement_article_comment_count)

    public_trgfunc_increment_article_comment_count = PGFunction(
        schema="public",
        signature="trgfunc_increment_article_comment_count()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN \n        UPDATE article_analytics\n    SET comments = comments + 1,\n        date_updated_utc = now()\n    WHERE article_id = NEW.article_id;\n    RETURN NEW;\n\n\n    END;\n    $$ LANGUAGE plpgsql",
    )
    op.create_entity(public_trgfunc_increment_article_comment_count)

    public_trgfunc_decrement_article_like_count = PGFunction(
        schema="public",
        signature="trgfunc_decrement_article_like_count()",
        definition="RETURNS TRIGGER AS $$\nBEGIN\n    UPDATE article_analytics\n    SET likes = likes - 1,\n        date_updated_utc = now()\n    WHERE article_id = OLD.article_id;\n    RETURN OLD;\nEND;\n$$ LANGUAGE plpgsql",
    )
    op.create_entity(public_trgfunc_decrement_article_like_count)

    public_trgfunc_increment_article_like_count = PGFunction(
        schema="public",
        signature="trgfunc_increment_article_like_count()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN \n        UPDATE article_analytics\n    SET likes = likes + 1,\n        date_updated_utc = now()\n    WHERE article_id = NEW.article_id;\n    RETURN NEW;\n\n\n    END;\n    $$ LANGUAGE plpgsql",
    )
    op.create_entity(public_trgfunc_increment_article_like_count)

    public_trgfunc_article_analytics_record = PGFunction(
        schema="public",
        signature="trgfunc_article_analytics_record()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN \n        INSERT INTO article_analytics (id, article_id, likes, comments,date_created_utc, date_updated_utc)\n        VALUES (gen_random_uuid(),NEW.id, 0,0, now(), now());\n        RETURN NEW;\n    END;\n    $$ LANGUAGE plpgsql",
    )
    op.create_entity(public_trgfunc_article_analytics_record)

    public_trgfunc_delete_article_analytics_record = PGFunction(
        schema="public",
        signature="trgfunc_delete_article_analytics_record()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        DELETE FROM article_analytics\n        WHERE article_id = OLD.id;\n        RETURN OLD;\n    END;\n    $$ LANGUAGE plpgsql",
    )
    op.create_entity(public_trgfunc_delete_article_analytics_record)

    public_article_comments_trg_decrement_article_comment_count = PGTrigger(
        schema="public",
        signature="trg_decrement_article_comment_count",
        on_entity="public.article_comments",
        is_constraint=False,
        definition="AFTER DELETE ON article_comments\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_decrement_article_comment_count()",
    )
    op.create_entity(public_article_comments_trg_decrement_article_comment_count)

    public_article_comments_trg_increment_article_comment_count = PGTrigger(
        schema="public",
        signature="trg_increment_article_comment_count",
        on_entity="public.article_comments",
        is_constraint=False,
        definition="AFTER INSERT ON article_comments\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_increment_article_comment_count()",
    )
    op.create_entity(public_article_comments_trg_increment_article_comment_count)

    public_article_likes_trg_decrement_article_like_count = PGTrigger(
        schema="public",
        signature="trg_decrement_article_like_count",
        on_entity="public.article_likes",
        is_constraint=False,
        definition="AFTER DELETE ON article_likes\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_decrement_article_like_count()",
    )
    op.create_entity(public_article_likes_trg_decrement_article_like_count)

    public_article_likes_trg_increment_article_like_count = PGTrigger(
        schema="public",
        signature="trg_increment_article_like_count",
        on_entity="public.article_likes",
        is_constraint=False,
        definition="AFTER INSERT ON article_likes\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_increment_article_like_count()",
    )
    op.create_entity(public_article_likes_trg_increment_article_like_count)

    public_articles_trg_article_analytics_record = PGTrigger(
        schema="public",
        signature="trg_article_analytics_record",
        on_entity="public.articles",
        is_constraint=False,
        definition="AFTER INSERT ON articles\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_article_analytics_record()",
    )
    op.create_entity(public_articles_trg_article_analytics_record)

    public_articles_trg_delete_article_analytics_record = PGTrigger(
        schema="public",
        signature="trg_delete_article_analytics_record",
        on_entity="public.articles",
        is_constraint=False,
        definition="AFTER DELETE ON articles\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_delete_article_analytics_record()",
    )
    op.create_entity(public_articles_trg_delete_article_analytics_record)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_articles_trg_delete_article_analytics_record = PGTrigger(
        schema="public",
        signature="trg_delete_article_analytics_record",
        on_entity="public.articles",
        is_constraint=False,
        definition="AFTER DELETE ON articles\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_delete_article_analytics_record()",
    )
    op.drop_entity(public_articles_trg_delete_article_analytics_record)

    public_articles_trg_article_analytics_record = PGTrigger(
        schema="public",
        signature="trg_article_analytics_record",
        on_entity="public.articles",
        is_constraint=False,
        definition="AFTER INSERT ON articles\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_article_analytics_record()",
    )
    op.drop_entity(public_articles_trg_article_analytics_record)

    public_article_likes_trg_increment_article_like_count = PGTrigger(
        schema="public",
        signature="trg_increment_article_like_count",
        on_entity="public.article_likes",
        is_constraint=False,
        definition="AFTER INSERT ON article_likes\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_increment_article_like_count()",
    )
    op.drop_entity(public_article_likes_trg_increment_article_like_count)

    public_article_likes_trg_decrement_article_like_count = PGTrigger(
        schema="public",
        signature="trg_decrement_article_like_count",
        on_entity="public.article_likes",
        is_constraint=False,
        definition="AFTER DELETE ON article_likes\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_decrement_article_like_count()",
    )
    op.drop_entity(public_article_likes_trg_decrement_article_like_count)

    public_article_comments_trg_increment_article_comment_count = PGTrigger(
        schema="public",
        signature="trg_increment_article_comment_count",
        on_entity="public.article_comments",
        is_constraint=False,
        definition="AFTER INSERT ON article_comments\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_increment_article_comment_count()",
    )
    op.drop_entity(public_article_comments_trg_increment_article_comment_count)

    public_article_comments_trg_decrement_article_comment_count = PGTrigger(
        schema="public",
        signature="trg_decrement_article_comment_count",
        on_entity="public.article_comments",
        is_constraint=False,
        definition="AFTER DELETE ON article_comments\n        FOR EACH ROW\n        EXECUTE FUNCTION trgfunc_decrement_article_comment_count()",
    )
    op.drop_entity(public_article_comments_trg_decrement_article_comment_count)

    public_trgfunc_delete_article_analytics_record = PGFunction(
        schema="public",
        signature="trgfunc_delete_article_analytics_record()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        DELETE FROM article_analytics\n        WHERE article_id = OLD.id;\n        RETURN OLD;\n    END;\n    $$ LANGUAGE plpgsql",
    )
    op.drop_entity(public_trgfunc_delete_article_analytics_record)

    public_trgfunc_article_analytics_record = PGFunction(
        schema="public",
        signature="trgfunc_article_analytics_record()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN \n        INSERT INTO article_analytics (id, article_id, likes, comments,date_created_utc, date_updated_utc)\n        VALUES (gen_random_uuid(),NEW.id, 0,0, now(), now());\n        RETURN NEW;\n    END;\n    $$ LANGUAGE plpgsql",
    )
    op.drop_entity(public_trgfunc_article_analytics_record)

    public_trgfunc_increment_article_like_count = PGFunction(
        schema="public",
        signature="trgfunc_increment_article_like_count()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN \n        UPDATE article_analytics\n    SET likes = likes + 1,\n        date_updated_utc = now()\n    WHERE article_id = NEW.article_id;\n    RETURN NEW;\n\n\n    END;\n    $$ LANGUAGE plpgsql",
    )
    op.drop_entity(public_trgfunc_increment_article_like_count)

    public_trgfunc_decrement_article_like_count = PGFunction(
        schema="public",
        signature="trgfunc_decrement_article_like_count()",
        definition="RETURNS TRIGGER AS $$\nBEGIN\n    UPDATE article_analytics\n    SET likes = likes - 1,\n        date_updated_utc = now()\n    WHERE article_id = OLD.article_id;\n    RETURN OLD;\nEND;\n$$ LANGUAGE plpgsql",
    )
    op.drop_entity(public_trgfunc_decrement_article_like_count)

    public_trgfunc_increment_article_comment_count = PGFunction(
        schema="public",
        signature="trgfunc_increment_article_comment_count()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN \n        UPDATE article_analytics\n    SET comments = comments + 1,\n        date_updated_utc = now()\n    WHERE article_id = NEW.article_id;\n    RETURN NEW;\n\n\n    END;\n    $$ LANGUAGE plpgsql",
    )
    op.drop_entity(public_trgfunc_increment_article_comment_count)

    public_trgfunc_decrement_article_comment_count = PGFunction(
        schema="public",
        signature="trgfunc_decrement_article_comment_count()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN \n        UPDATE article_analytics\n    SET comments = comments - 1,\n        date_updated_utc = now()\n    WHERE article_id = OLD.article_id;\n    RETURN OLD;\n\n\n    END;\n    $$ LANGUAGE plpgsql",
    )
    op.drop_entity(public_trgfunc_decrement_article_comment_count)

    op.alter_column("articles", "author_id", existing_type=sa.UUID(), nullable=False)
    op.add_column(
        "article_likes",
        sa.Column("text", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    # ### end Alembic commands ###
